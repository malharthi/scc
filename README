
                Simple C-Subset (or C-like lang) Compiler (SCC)


1. INTRODUCTION

	Simple C-Subset Compiler is my graduation project in for my bachelor
	degree. It translates source programs written in a subset of the C
	language into Intel i386 assembly language, which will be then passed to
	an assembler to generate executable files.

	The subset is simple, there are no pointers or structures for example. The
	compiler only supports the basic C statements, two data types including
	basic implementation for arrays and strings, in addition to functions.
	There are also several built-in functions for basic IO within the system
	terminal.

	The goal of this project is to provide a simple and a fully working
	compiler, which can be used to demonstrate how compilers can be
	implemented in a language such as C++. So my goal was not creating a
	language, but creating a compiler that you can look at and play with its
	code, and learn from it. That is the reason I did not focus on improving
	the language, because creating a language for no specific reason is
	pointless, unless it fulfills a need or introduces new features. So
	instead, I kept on making the compiler just work and generate correct
	assembler code.


2. STEPS FOR COMPILING AND RUNNING SCC

	Currently SCC generates code that works on Linux, so there are the steps
	to compile and run SCC on Linux: (It was tested on Ubuntu Linux)

	- Download the source code (no binaries are provided).
	- Make sure you have gcc, python, and nasm (the assembler) installed.
	- To install GCC in Ubuntu:

		sudo apt-get install build-essential

	- To install nasm in Ubuntu:

		sudo apt-get install nasm

	- To Compile SCC:

		unzip scc
		cd scc

		./build.py

	  The resulted binary for SCC will be residing in the 'build' directory.

	- To compile one of the examples:

		./build/scc ./tests/fact-rec.c

		Note: If there are no messages then that means the example was
		compiled correctly.

	- To run the generated executable:

		./tests/fact-rec

	Notes:
	 - The compiler only accepts one source file.
	 - The comiler will generate 3 files. E.g., if you compiled fact-rec.c
	   you will get:
	 	- fact-rec.intermediate: contains intermediate code (3-address code)
	 	- fact-rec.s: contains the Intel i386 assembler code.
	 	- fact-rec: the executable file
	 	- You will see a fourth file, fact-rec.o, which is the object code
	 	  before linking. You can delete this one.
	 - The directory scc/tests/ contains some code examples to see what
	   SCC is able to compile.


3. IMPLEMENTATION

	The original compiler was written in C#. This is a port of the original
	work to C++ since I moved to OS X, and I believe that it is more
	convenient for me and many others to play with the code in C++ on a
	UNIX-based platform. For now the generated assembly code works only on
	Linux. Original plan was to make to work on OS X, but OS X has more strict
	ABI (App. Binary Interface) requirements. For instance, stack should be
	aligned in a specific way in order to be able to call functions from
	dynamically linked libraries, such as glibc, which we are using.

	Both scanner and parser are hand-written (no lexer, parser generators are
	used). The parser is a recursive-descent parser. However most of the
	recursions were optimized for speed and converted into loops as it was
	possible.

	The front-end (lex and parser) is single pass, and generates intermediate
	code immediately, and the back-end (code generator) is single pass as
	well, which takes the intermediate code and translate  it to the
	equivalent instructions of the i386 assembly. It was written this way so
	it would be possible to add an optimization phase to one or both of the
	two passes later on.  

	The resulting assembly code is assembled using the nasm assembler and 
	linked using the linker included with the GCC tool-chain. Both are
	required to compile the source code automatically. The final executable
	file is linked to glibc. 

3.1 NOTE

	I am sure you will encounter A LOT of bugs and weired behavior either in
	the compilation process itself or in the generated intermediate or 
	assembler code. I do not plan on fixing or developing this thing; however,
	you are welcome to inform me about anything you find. You can send me
	patches if you want. I can be reached via (mohannad.harthi (at) gmail.com)


4. THE C SUBSET (OR THE C-LIKE LANGUAGE)

	The compiler can compile a subset of the C language, which is described
	below:

4.1. DATA TYPES
	
	The subset supports two data types:
		1. int  : 32-bit signed integer.
		2. char : 8-bit unsigned integer.
	
	Static arrays are only supported.

	Arrays are not implemented as pointers, if you pass an array to a
	function the first element will be passed instead, which obviously is not
	the correct behavior. There are no plans to fix that at the time being.

	Local variables in each scope should be declared at the beginning of the
	the scope block before any other statements, just like the good old C89.

4.2 LITERALS
	
	- Integers: e.g., 2343, -323 
	- Strings: e.g., "Hi, \r\n My name is Mohannad \t"
	- Characters: e.g., 'a', '\n'
	

4.3 EXPRESSIONS
	
	These operators are only supported in expressions:
    +, -, post ++ and --,  *, /, %, <, <=, >, >=, ==, ||, &&
    
    Short circuits are not supported in boolean expressions.

4.4 STATEMENTS
	
	- if-else statement.
	- switch statement.
	- while statement.
	- do-while statement.
	- for statement. (Statement lists are not supported)
	- break and continue statements.

4.5 FUNCTIONS
	
	There are several built-in functions for basic IO, which are described
	below:
	
	- printStr(char str[]); printStr("string");
		Prints a null-terminated string into the stdout.
	- printChar(char c);
	- printInt(int n);
	- readStr(char buffer[], int bufferSize);
	- readInt(int n)
	
	Note: Theses functions are translated to calls to the standard C IO
	functions, such as printf and scanf. Also, these functions are treated as
	keywords and thus are part of the language syntax.  

	Yo can define your own functions, of course, otherwise this compiler would
	be boring! However,  it is important to know that you cannot pass arrays,
	and you cannot write forward declarations for functions this way:

	int f(int x);

	So you should be careful about the order in which you define your
	functions. You will run to awkward situations when you have too many
	functions that call each other.

	Additionally, scope is implemented properly (I hope). However, there is no
	public scope (global variables), but the good news is, inside functions,
	you can have nested scopes as many as you want. For example:

	void foo()
	{
		{
			if (true) {}
		}
	}

	There are many limitations in the language, for example there are no type
	checking, and arrays cannot be passed between functions and so on. The
	goal was not creating a language, but a small experiment in compiler
	writing.

	Have fun!

	Mohannad Alharthi

